#version 450 core

#define PI 3.14159265359f
#define INVERSE_PI 0.31830988618f
#define SQRT2 1.41421356237f
#define EPSILON 0.000001f

//Enable/disable shadow cone tracing
#define SHADOWS 1
//Multiple of voxel grid size
#define CONE_TRACE_MAX_DISTANCE 2.0f
//Set higher for better performance, set lower for better quality
#define CONE_TRACE_STEP_SIZE 0.5f

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(binding = 0) uniform sampler3D voxelAlbedo;
layout(binding = 1) uniform sampler3D voxelNormal;
layout(binding = 2, rgba8) uniform writeonly restrict image3D voxelDirectRadiance;

struct PointLight
{
	vec3 position;
	vec3 color;
	float coneAperture;
};

const int maxPointLights = 5;
uniform PointLight pointLights[maxPointLights];
uniform int numLights;
//Resolution of voxel grid
uniform int       voxelResolution;
//Voxel grid size in world units
uniform float     voxelGridSize;
uniform float     voxelGridSizeInverse;
//World space voxel grid center position
uniform vec3      voxelGridPos;

uniform bool debug;

//Inverse square falloff attenuation
float attenuate(float dist) { return 1.0f / (dist * dist); }
bool  isInVoxelVolume(vec3 worldPos);
vec3  voxelToWorldSpace(ivec3 voxelPos);
vec4  readVoxel(vec3 worldPos, float mipLevel);
float traceShadowCone(vec3 coneDirection, float coneAperture, float maxDistance);
vec3  computePointLight(PointLight light);
vec3  computeDirectRadiance();

vec3  position         = voxelToWorldSpace(ivec3(gl_GlobalInvocationID));
vec4  albedo           = texelFetch(voxelAlbedo,           ivec3(gl_GlobalInvocationID), 0);
vec4  normalEmissivity = texelFetch(voxelNormal, ivec3(gl_GlobalInvocationID), 0);
vec3  normal           = normalEmissivity.xyz * 2.0f - vec3(1.0f);
float emissivity       = normalEmissivity.a;

float voxelWorldSize = voxelGridSize / voxelResolution;

void main()
{
	if(gl_GlobalInvocationID.x >= voxelResolution || gl_GlobalInvocationID.y >= voxelResolution || gl_GlobalInvocationID.z >= voxelResolution)
		return;

	vec3 Lo = vec3(0.0f);

	if(any(greaterThan(albedo, vec4(EPSILON))))
		Lo = computeDirectRadiance();

	//Write voxel information to 3D texture
	imageStore(voxelDirectRadiance, ivec3(gl_GlobalInvocationID), vec4(Lo, albedo.a));
}

bool isInVoxelVolume(vec3 worldPos)
{
	vec3 voxelPos = vec3((worldPos - voxelGridPos) * voxelGridSizeInverse);
	return !(any(greaterThan(abs(voxelPos), vec3(1.0f))));
}

vec3 voxelToWorldSpace(ivec3 voxelPos)
{
	vec3 worldPos = vec3(voxelPos);
	worldPos /= voxelResolution;
	//[0, 1] to [-1, 1]
	worldPos *= 2.0f;
	worldPos -= vec3(1.0f);
	worldPos *= voxelGridSize;
	worldPos += voxelGridPos;
	return worldPos;
}

vec4 readVoxel(vec3 worldPos, float mipLevel)
{
	//World to voxel space
	vec3 voxelPos = vec3((worldPos - voxelGridPos) * voxelGridSizeInverse);
	//[-1, 1] to [0, 1]
	voxelPos = (voxelPos * 0.5f) + vec3(0.5f);
	return textureLod(voxelAlbedo, voxelPos, mipLevel);
}

float traceShadowCone(vec3 coneDirection, float coneAperture, float maxDistance)
{
	float alpha    = 0.0f;
	//Offset cone to prevent self-sampling (square root of 2 is voxel diagonal half-extent)
	float distance = voxelWorldSize;
	vec3 startPos  = position + normal * distance * 2.0f * SQRT2;
	startPos      += coneDirection     * distance * 2.0f * SQRT2;
	float maxDist  = min(voxelGridSize * CONE_TRACE_MAX_DISTANCE, maxDistance);
	
	while((distance < maxDist) && (alpha < 1.0f))
	{
		vec3 samplePosition = startPos + coneDirection * distance;
		float coneDiameter  = max(2.0f * coneAperture * distance, voxelWorldSize);
		float mipLevel      = log2(coneDiameter / voxelWorldSize);

		//Ensure cone is within voxel volume
		if(!isInVoxelVolume(samplePosition))
			break;

		float sampleAlpha = readVoxel(samplePosition, mipLevel).a;

		//Front to back blending to avoid artifacts
		alpha += (1.0f - alpha) * sampleAlpha;

		distance += coneDiameter * CONE_TRACE_STEP_SIZE;
	}

	return 1.0f - alpha;
}

vec3 computePointLight(PointLight light)
{
	vec3 lightDir         = light.position - position;
	float distanceToLight = length(lightDir);
	lightDir              = normalize(lightDir);
	float attenuation     = attenuate(distanceToLight);

	vec3 weight = normal * normal;
	//Calculate directional normal attenuation
	float rDotL = dot(vec3(1.0, 0.0, 0.0), lightDir);
	float uDotL = dot(vec3(0.0, 1.0, 0.0), lightDir);
	float fDotL = dot(vec3(0.0, 0.0, 1.0), lightDir);

	rDotL = normal.x > 0.0 ? max(rDotL, 0.0) : max(-rDotL, 0.0);
	uDotL = normal.y > 0.0 ? max(uDotL, 0.0) : max(-uDotL, 0.0);
	fDotL = normal.z > 0.0 ? max(fDotL, 0.0) : max(-fDotL, 0.0);
	//Voxel shading average from all front sides
	float nDotL = rDotL * weight.x + uDotL * weight.y + fDotL * weight.z;

	float visibility = 1.0f;
	#if(SHADOWS == 1)
		visibility = clamp(traceShadowCone(lightDir, light.coneAperture, distanceToLight), 0.0f, 1.0f);
	#endif
	return nDotL * attenuation * light.color * visibility;
}

vec3 computeDirectRadiance()
{
	vec3 Lo = vec3(0.0f);
	for(int i = 0; i < min(numLights, maxPointLights); i++)
		Lo += computePointLight(pointLights[i]);

	Lo *= albedo.rgb;
	//Lo *= INVERSE_PI;

	Lo += emissivity * albedo.rgb;
	return Lo;
}