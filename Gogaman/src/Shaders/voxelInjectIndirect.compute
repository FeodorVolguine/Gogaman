#version 450 core

#define PI 3.14159265359f
#define INVERSE_PI 0.31830988618f
#define SQRT2 1.41421356237f
#define EPSILON 0.000001f

//Multiple of voxel grid size
#define CONE_TRACE_MAX_DISTANCE 2.0f
//Set higher for better performance but lower quality
#define CONE_TRACE_STEP_SIZE 0.5f
//Number of diffuse cones to trace (16 or 32)
#define NUM_DIFFUSE_CONES 16

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(binding = 0) uniform sampler3D voxelAlbedo;
layout(binding = 1) uniform sampler3D voxelNormal;
layout(binding = 2) uniform sampler3D voxelDirectRadiance;
layout(binding = 3, rgba8) uniform writeonly restrict image3D voxelTotalRadiance;

//Resolution of voxel grid
uniform int       voxelResolution;
//Voxel grid size in world units
uniform float     voxelGridSize;
uniform float     voxelGridSizeInverse;
//World space voxel grid center position
uniform vec3      voxelGridPos;

uniform bool debug;

bool isInVoxelVolume(vec3 worldPos);
vec3 voxelToWorldSpace(ivec3 voxelPos);
vec4 readVoxel(vec3 worldPos, float mipLevel);
vec3 traceCone(vec3 coneDirection, float coneAperture);
vec3 computeIndirectDiffuse();

vec3 position       = voxelToWorldSpace(ivec3(gl_GlobalInvocationID));
vec4 albedo         = texelFetch(voxelAlbedo,           ivec3(gl_GlobalInvocationID), 0);
vec3 normal         = texelFetch(voxelNormal, ivec3(gl_GlobalInvocationID), 0).xyz * 2.0f - vec3(1.0f);
vec3 directRadiance = texelFetch(voxelDirectRadiance,   ivec3(gl_GlobalInvocationID), 0).rgb;

#if(NUM_DIFFUSE_CONES == 16)
	const vec3 diffuseConeDirections[16] = { vec3(0.57735f, 0.57735f, 0.57735f), vec3(0.57735f, -0.57735f, -0.57735f), vec3(-0.57735f, 0.57735f, -0.57735f), vec3(-0.57735f, -0.57735f, 0.57735f), vec3(-0.903007f, -0.182696f, -0.388844f), vec3(-0.903007f, 0.182696f, 0.388844f), vec3(0.903007f, -0.182696f, 0.388844f), vec3(0.903007f, 0.182696f, -0.388844f), vec3(-0.388844f, -0.903007f, -0.182696f), vec3(0.388844f, -0.903007f, 0.182696f), vec3(0.388844f, 0.903007f, -0.182696f), vec3(-0.388844f, 0.903007f, 0.182696f), vec3(-0.182696f, -0.388844f, -0.903007f), vec3(0.182696f, 0.388844f, -0.903007f), vec3(-0.182696f, 0.388844f, 0.903007f), vec3(0.182696f, -0.388844f, 0.903007f) };
	#define DIFFUSE_CONE_APERTURE 0.872665f
#else
	const vec3 diffuseConeDirections[32] = { vec3(0.898904f, 0.435512f, 0.0479745f), vec3(0.898904f, -0.435512f, -0.0479745f), vec3(0.898904f, 0.0479745f, -0.435512f), vec3(0.898904f, -0.0479745f, 0.435512f), vec3(-0.898904f, 0.435512f, -0.0479745f), vec3(-0.898904f, -0.435512f, 0.0479745f), vec3(-0.898904f, 0.0479745f, 0.435512f), vec3(-0.898904f, -0.0479745f, -0.435512f), vec3(0.0479745f, 0.898904f, 0.435512f), vec3(-0.0479745f, 0.898904f, -0.435512f), vec3(-0.435512f, 0.898904f, 0.0479745f), vec3(0.435512f, 0.898904f, -0.0479745f), vec3(-0.0479745f, -0.898904f, 0.435512f), vec3(0.0479745f, -0.898904f, -0.435512f), vec3(0.435512f, -0.898904f, 0.0479745f), vec3(-0.435512f, -0.898904f, -0.0479745f), vec3(0.435512f, 0.0479745f, 0.898904f), vec3(-0.435512f, -0.0479745f, 0.898904f), vec3(0.0479745f, -0.435512f, 0.898904f), vec3(-0.0479745f, 0.435512f, 0.898904f), vec3(0.435512f, -0.0479745f, -0.898904f), vec3(-0.435512f, 0.0479745f, -0.898904f), vec3(0.0479745f, 0.435512f, -0.898904f), vec3(-0.0479745f, -0.435512f, -0.898904f), vec3(0.57735f, 0.57735f, 0.57735f), vec3(0.57735f, 0.57735f, -0.57735f), vec3(0.57735f, -0.57735f, 0.57735f), vec3(0.57735f, -0.57735f, -0.57735f), vec3(-0.57735f, 0.57735f, 0.57735f), vec3(-0.57735f, 0.57735f, -0.57735f), vec3(-0.57735f, -0.57735f, 0.57735f), vec3(-0.57735f, -0.57735f, -0.57735f) };
	#define DIFFUSE_CONE_APERTURE 0.628319f
#endif

float voxelWorldSize = voxelGridSize / (voxelResolution / 2.0f);

void main()
{
	if(gl_GlobalInvocationID.x >= voxelResolution || gl_GlobalInvocationID.y >= voxelResolution || gl_GlobalInvocationID.z >= voxelResolution)
		return;

	vec3 Lo = vec3(0.0f);

	if(any(greaterThan(albedo, vec4(EPSILON))))
	{
		Lo = directRadiance;
		Lo += computeIndirectDiffuse();
	}

	//Write voxel information to 3D texture
	imageStore(voxelTotalRadiance, ivec3(gl_GlobalInvocationID), vec4(Lo, albedo.a));
}

bool isInVoxelVolume(vec3 worldPos)
{
	vec3 voxelPos = vec3((worldPos - voxelGridPos) * voxelGridSizeInverse);
	return !(any(greaterThan(abs(voxelPos), vec3(1.0f))));
}

vec3 voxelToWorldSpace(ivec3 voxelPos)
{
	vec3 worldPos = vec3(voxelPos);
	worldPos /= voxelResolution;
	//[0, 1] to [-1, 1]
	worldPos *= 2.0f;
	worldPos -= vec3(1.0f);
	worldPos *= voxelGridSize;
	worldPos += voxelGridPos;
	return worldPos;
}

vec4 readVoxel(vec3 worldPos, float mipLevel)
{
	//World to voxel space
	vec3 voxelPos = vec3((worldPos - voxelGridPos) * voxelGridSizeInverse);
	//[-1, 1] to [0, 1]
	voxelPos = (voxelPos * 0.5f) + vec3(0.5f);
	return textureLod(voxelDirectRadiance, voxelPos, mipLevel);
}

vec3 traceCone(vec3 coneDirection, float coneAperture, float offset)
{
	vec4 color = vec4(0.0f);
	float coneDiameterCoefficient = 2.0f * tan(coneAperture * 0.5f);
	//Offset cone to prevent self-sampling (square root of 2 is the voxel diagonal half-extent)
	float distance = voxelWorldSize * offset;
	vec3 startPos  = position + normal * distance * 2.0f * SQRT2;
	float maxDist  = CONE_TRACE_MAX_DISTANCE * voxelGridSize;

	while((distance < maxDist) && (color.a < 1.0f))
	{
		float coneDiameter  = max(coneDiameterCoefficient * distance, voxelWorldSize);
		float mipLevel      = max(log2(coneDiameter / voxelWorldSize) - 1.0f, 0.0f);
		vec3 samplePosition = startPos + coneDirection * distance;

		//Ensure cone is within voxel volume and last mip level has not been sampled
		if((!isInVoxelVolume(samplePosition)) || (mipLevel > textureQueryLevels(voxelDirectRadiance)))
			break;

		vec4 sampleColor = readVoxel(samplePosition, mipLevel);

		//Front to back blending to avoid artifacts
		color += (1.0f - color.a) * sampleColor;

		distance += coneDiameter * CONE_TRACE_STEP_SIZE;
	}

	return color.rgb;
}

vec3 computeIndirectDiffuse()
{
	vec3 Lo = vec3(0.0f);
	for(int i = 0; i < NUM_DIFFUSE_CONES; i++)
	{
		if(dot(normal, diffuseConeDirections[i]) < 0.0f)
			continue;

		Lo += traceCone(diffuseConeDirections[i], DIFFUSE_CONE_APERTURE, 4.0f);
	}

	Lo /= NUM_DIFFUSE_CONES * 0.5f;
	//Lo *= 1.0f / (NUM_DIFFUSE_CONES * 0.5f);

	//TODO: Normalize for Lambert??? Multiply by albedo?
	Lo *= INVERSE_PI;
	return Lo;
}